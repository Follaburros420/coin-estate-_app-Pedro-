// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  email                  String    @unique
  listHash               String
  destinationValues      String
  userTokens             String[]  @default([]) // Default to an empty array
  destinationCalculation String
  resetToken             String? // Optional, for password reset
  resetTokenExpires      DateTime? // Optional, token expiration time
  sessions               Session[] // One-to-many relationship with Session
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
}

// model UserTokens {
//   id             String  @id @default(auto()) @map("_id") @db.ObjectId
//   tokenAddress   String
//   tokenId        String
//   numberOfTokens String
//   transactionId  String
//   User           User?   @relation(fields: [userId], references: [id])
//   userId         String? @db.ObjectId
// }

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id]) // Corrected
  expiresAt DateTime
}

model Blog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  heading     String
  items       Item[]
  details     String
  description String
  blogStatus  String
  userId      String
  email       String
  image       String
  subheading  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Item {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId    String
  content      Blog     @relation(fields: [contentId], references: [id])
  name         String
  text_details String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model property {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  totalInvestmentPrice Float
  description          String @db.String
  bedRoom              Int
  bathRoom             Int
  roomSize             Float
  constructionYear     String
  // attributes           Attribute[]
  saleStatus           String
  houseType            String
  location             String
  netAnualIncome       Float
  propertyType         String
  propertyMaintenance  Int
  tokenPrice           Float
  expectedIncome       Float
  roiExpected          Float
  availableTokens      Int
  expectedAnnual       Float
  averageDollar        Float
  totalReturn          Float
  attractive           String
  // Finance fields
  propertyPrice        Float
  renovations          Float
  tokenizationCosts    Float
  commercialCosts      Float
  legalCosts           Float
  dueDiligence         Float
  financialReserves    Float
  difference4x         Float
  supplyFee            Float
  marketingPlan        Float
  grossIncome          Float
  management           Float
  taxes                Float
  insurance            Float
  SPVMaintenance       Float
  vacancyReserve       Float
  SPVCreation          Float
  closingCosts         Float

  // Owner details
  email     String
  userId    String
  address   String
  documents String?

  // New Fields for Image Data
  image     String
  subImages String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model transaction {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  sender          String
  recipient       String
  amount          String
  transactionHash String
  status          String
  createdAt       DateTime @default(now())
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  amount          Int
  currency        String
  paymentIntentId String
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  propertyId      String
}

model minted {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  tokenId      String
  userId       String
  address      String
  price        Int
  tokenAddress String
}

model monthlyProcess {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  tokenId      String
  userId       String
  percentage   Int
  address      String
  totalPrice   Int
  price        Int
  tokenAddress String
}

model ExchangeRate {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp String
  cop       Float    @map("cop")
  createdAt DateTime @default(now())
}
