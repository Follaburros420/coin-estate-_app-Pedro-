https://docs.stripe.com/sdks/stripejs-react

https://github.com/sonnysangha/stripe-payment-elements-with-https-nextjs-14-demo/blob/main/app/api/create-payment-intent/route.ts

================================ Email Requirements =====================================
Enable 2-factor authentication on your Gmail account (web3genesisai@gmail.com):
Go to your Google Account settings
Navigate to Security
Enable 2-Step Verification
Generate an App Password:
Go to your Google Account settings
Navigate to Security
Look for "App passwords" (or search for it)
Select "Mail" as the app and "Other" as the device
Give it a name like "Coin Estate App"
Copy the 16-character password that Google generates
Update your .env file with the new App Password:
Replace the current EMAIL_PASS value with the App Password you just generated
The line should look like: EMAIL_PASS=your_new_app_password





const distributeFunds = (monthlyValues, tokenHolders) => {
  // Step 1: Group token holders by tokenId and sum their amounts
  const groupedHolders = tokenHolders.reduce((acc, transaction) => {
    if (!acc[transaction.propertyId]) {
      acc[transaction.propertyId] = {};
    }
    if (!acc[transaction.propertyId][transaction.userId]) {
      acc[transaction.propertyId][transaction.userId] = 0;
    }
    acc[transaction.propertyId][transaction.userId] += transaction.amount;
    return acc;
  }, {});

  // Step 2: Calculate the distribution
  const distribution = monthlyValues.reduce((acc, monthlyToken) => {
    const { tokenId, percentage, price, totalPrice, createdAt } = monthlyToken;
    console.log("ðŸš€ ~ distribution ~ createdAt:", monthlyValues,tokenHolders)

    // If no holders for this tokenId, skip
    if (!groupedHolders[tokenId]) {
      acc[tokenId] = {};
      return acc;
    }

    let distributableAmount = price / totalPrice;

    // Calculate the distributable amount by percentage
    // let distributableAmount = (percentage / 100) * price;
    //  distributableAmount = distributableAmount / totalPrice

    // Get total tokens held for this tokenId
    const totalTokens = Object.values(groupedHolders[tokenId]).reduce((sum, value) => sum + value, 0);
    console.log('ðŸš€ ~ distribution ~ totalTokens:', totalTokens, totalPrice);

    // Calculate each holder's share
    acc[tokenId] = {};
    for (const userId in groupedHolders[tokenId]) {
      acc[tokenId][userId] = totalTokens * distributableAmount;

      // acc[tokenId][userId] = totalTokens * distributableAmount;
    }

    return acc;
  }, {});

  return distribution;
};